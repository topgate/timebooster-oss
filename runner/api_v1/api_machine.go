package api_v1

// generated by lightweight-swagger-codegen@eaglesakura

import (
	"github.com/eaglesakura/swagger-go-core"
	"github.com/eaglesakura/swagger-go-core/errors"
	"github.com/eaglesakura/swagger-go-core/utils"
	"net/url"
	"strings"
)

const MachineApi_BasePath string = "/api/v1"

type MachineApi struct {
	BasePath string
}

func NewMachineApi() *MachineApi {
	return &MachineApi{
		BasePath: MachineApi_BasePath,
	}
}

/*

   APIキーに紐付いたビルドマシン用を起動する。 主にgithubのpushに反応し、事前にビルドマシンを起動するために使用する。
*/
type MachineApiMachineBootPostRequest struct {
	/*
	   クライアントの妥当性を検証するためのAPIKey  発行されたAPIKey以外はAPIを呼び出すことはできない。
	*/
	Key *string
}

/*

   APIキーに紐付いたビルドマシン用を起動する。 主にgithubのpushに反応し、事前にビルドマシンを起動するために使用する。

     result: void
*/
func (it *MachineApi) MachineBootPost(_client swagger.FetchClient, _request *MachineApiMachineBootPostRequest, result interface{}) error {
	if !_client.NewValidator(_request.Key, _request.Key == nil).Required(true).Valid(_client) {
		errors.New(0, "Missing the required parameter 'Key' when calling MachineBootPost")
	}

	// create path and map variables
	{
		localVarPath := strings.Replace("/machine/boot", "{format}", "json", -1)
		_client.SetApiPath(utils.AddPath(it.BasePath, localVarPath))
		_client.SetMethod(strings.ToUpper("Post"))
	}

	if _request.Key != nil {
		_client.AddQueryParam("key", utils.ParameterToString(_request.Key))
	}

	return _client.Fetch(result)
}

/*

   APIキーに紐付いたビルドマシンを削除する
*/
type MachineApiMachineDeleteRequest struct {
	/*
	   クライアントの妥当性を検証するためのAPIKey  発行されたAPIKey以外はAPIを呼び出すことはできない。
	*/
	Key *string
}

/*

   APIキーに紐付いたビルドマシンを削除する

     result: void
*/
func (it *MachineApi) MachineDelete(_client swagger.FetchClient, _request *MachineApiMachineDeleteRequest, result interface{}) error {
	if !_client.NewValidator(_request.Key, _request.Key == nil).Required(true).Valid(_client) {
		errors.New(0, "Missing the required parameter 'Key' when calling MachineDelete")
	}

	// create path and map variables
	{
		localVarPath := strings.Replace("/machine", "{format}", "json", -1)
		_client.SetApiPath(utils.AddPath(it.BasePath, localVarPath))
		_client.SetMethod(strings.ToUpper("Delete"))
	}

	if _request.Key != nil {
		_client.AddQueryParam("key", utils.ParameterToString(_request.Key))
	}

	return _client.Fetch(result)
}

/*

   APIキーに紐付いたビルドマシンを取得する
*/
type MachineApiMachineGetRequest struct {
	/*
	   クライアントの妥当性を検証するためのAPIKey  発行されたAPIKey以外はAPIを呼び出すことはできない。
	*/
	Key *string
}

/*

   APIキーに紐付いたビルドマシンを取得する

     result: MachineInfo
*/
func (it *MachineApi) MachineGet(_client swagger.FetchClient, _request *MachineApiMachineGetRequest, result *MachineInfo) error {
	if !_client.NewValidator(_request.Key, _request.Key == nil).Required(true).Valid(_client) {
		errors.New(0, "Missing the required parameter 'Key' when calling MachineGet")
	}

	// create path and map variables
	{
		localVarPath := strings.Replace("/machine", "{format}", "json", -1)
		_client.SetApiPath(utils.AddPath(it.BasePath, localVarPath))
		_client.SetMethod(strings.ToUpper("Get"))
	}

	if _request.Key != nil {
		_client.AddQueryParam("key", utils.ParameterToString(_request.Key))
	}

	return _client.Fetch(result)
}

/*

   APIキーに紐付いたビルドマシンを作成する 既に作成済みの場合、何も行なわない
*/
type MachineApiMachinePostRequest struct {
	/*
	   クライアントの妥当性を検証するためのAPIKey  発行されたAPIKey以外はAPIを呼び出すことはできない。
	*/
	Key *string

	/*

	 */
	Payload *MachineRequest
}

/*

   APIキーに紐付いたビルドマシンを作成する 既に作成済みの場合、何も行なわない

     result: MachineInfo
*/
func (it *MachineApi) MachinePost(_client swagger.FetchClient, _request *MachineApiMachinePostRequest, result *MachineInfo) error {
	if !_client.NewValidator(_request.Key, _request.Key == nil).Required(true).Valid(_client) {
		errors.New(0, "Missing the required parameter 'Key' when calling MachinePost")
	}
	if !_client.NewValidator(_request.Payload, _request.Payload == nil).Valid(_client) {
		errors.New(0, "Missing the required parameter 'Payload' when calling MachinePost")
	}

	// create path and map variables
	{
		localVarPath := strings.Replace("/machine", "{format}", "json", -1)
		_client.SetApiPath(utils.AddPath(it.BasePath, localVarPath))
		_client.SetMethod(strings.ToUpper("Post"))
	}

	if _request.Key != nil {
		_client.AddQueryParam("key", utils.ParameterToString(_request.Key))
	}

	if _request.Payload != nil {
		_client.SetPayload(utils.NewJsonPayload(_request.Payload))
	}

	return _client.Fetch(result)
}

/*

   APIキーに紐付いたビルドマシン用の起動スクリプトを取得する
*/
type MachineApiMachineStartupscriptGetRequest struct {
	/*
	   クライアントの妥当性を検証するためのAPIKey  発行されたAPIKey以外はAPIを呼び出すことはできない。
	*/
	Key *string
}

/*

   APIキーに紐付いたビルドマシン用の起動スクリプトを取得する

     result: void
*/
func (it *MachineApi) MachineStartupscriptGet(_client swagger.FetchClient, _request *MachineApiMachineStartupscriptGetRequest, result interface{}) error {
	if !_client.NewValidator(_request.Key, _request.Key == nil).Required(true).Valid(_client) {
		errors.New(0, "Missing the required parameter 'Key' when calling MachineStartupscriptGet")
	}

	// create path and map variables
	{
		localVarPath := strings.Replace("/machine/startupscript", "{format}", "json", -1)
		_client.SetApiPath(utils.AddPath(it.BasePath, localVarPath))
		_client.SetMethod(strings.ToUpper("Get"))
	}

	if _request.Key != nil {
		_client.AddQueryParam("key", utils.ParameterToString(_request.Key))
	}

	return _client.Fetch(result)
}

/*

   APIキーに紐付いたビルドマシン用の起動スクリプトを設定する。
*/
type MachineApiMachineStartupscriptPostRequest struct {
	/*
	   クライアントの妥当性を検証するためのAPIKey  発行されたAPIKey以外はAPIを呼び出すことはできない。
	*/
	Key *string

	/*
	   起動時の実行スクリプト
	*/
	Script *string
}

/*

   APIキーに紐付いたビルドマシン用の起動スクリプトを設定する。

     result: void
*/
func (it *MachineApi) MachineStartupscriptPost(_client swagger.FetchClient, _request *MachineApiMachineStartupscriptPostRequest, result interface{}) error {
	if !_client.NewValidator(_request.Key, _request.Key == nil).Required(true).Valid(_client) {
		errors.New(0, "Missing the required parameter 'Key' when calling MachineStartupscriptPost")
	}
	if !_client.NewValidator(_request.Script, _request.Script == nil).Required(true).MinLength(1).Valid(_client) {
		errors.New(0, "Missing the required parameter 'Script' when calling MachineStartupscriptPost")
	}

	// create path and map variables
	{
		localVarPath := strings.Replace("/machine/startupscript", "{format}", "json", -1)
		_client.SetApiPath(utils.AddPath(it.BasePath, localVarPath))
		_client.SetMethod(strings.ToUpper("Post"))
	}

	if _request.Key != nil {
		_client.AddQueryParam("key", utils.ParameterToString(_request.Key))
	}

	// form params
	localVarFormParams := url.Values{}
	if _request.Script != nil {
		localVarFormParams.Add("script", utils.ParameterToString(_request.Script))
	}

	return _client.Fetch(result)
}

func (it *MachineApi) this_is_call_dummy() {
	v := url.Values{}
	v.Add("Key", "Value")

	errors.New(0, "stub")
	strings.ToUpper("")
}
