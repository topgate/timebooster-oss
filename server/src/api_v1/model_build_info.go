package api_v1

// generated by lightweight-swagger-codegen@eaglesakura

import (
	"encoding/json"
	"github.com/eaglesakura/swagger-go-core"
	"net/http"
)

// 現在のビルド情報を示す
type BuildInfo struct {

	// 一意にサーバーで割り当てられたID
	Id *string `json:"id"`

	State *BuildState `json:"state,omitempty"`

	Repository *BuildRepository `json:"repository,omitempty"`

	// ビルド設定を記述した \"timebooster.yml\" 本体情報
	Config *string `json:"config"`

	// ビルド開始日時（Unixミリ秒）
	StartDate *int64 `json:"startDate,omitempty"`

	// コンテナに適用する環境変数一覧 conofigファイルの記述と両方が適用される。 同じ設定を複数箇所に記述した場合の挙動はDockerのenvオプションに従う。
	Environment *EnvironmentValueArray `json:"environment,omitempty"`
}

// encode to json
func (it BuildInfo) String() string {
	buf, _ := json.Marshal(it)
	return string(buf)
}

type BuildInfoArray []BuildInfo

func (it *BuildInfo) Valid(factory swagger.ValidatorFactory) bool {
	if !factory.NewValidator(it.Id, it.Id == nil).
		Required(true).
		Valid(factory) {
		return false
	}
	if !factory.NewValidator(it.State, it.State == nil).
		Valid(factory) {
		return false
	}
	if !factory.NewValidator(it.Repository, it.Repository == nil).
		Valid(factory) {
		return false
	}
	if !factory.NewValidator(it.Config, it.Config == nil).
		Required(true).
		Valid(factory) {
		return false
	}
	if !factory.NewValidator(it.StartDate, it.StartDate == nil).
		Valid(factory) {
		return false
	}
	if !factory.NewValidator(it.Environment, it.Environment == nil).
		Valid(factory) {
		return false
	}

	return true
}

func (it *BuildInfo) WriteResponse(writer http.ResponseWriter, producer swagger.Producer) {
	writer.WriteHeader(200)
	if err := producer.Produce(writer, it); err != nil {
		panic(err) // let the recovery middleware deal with this
	}
}

func (arr *BuildInfoArray) Valid(factory swagger.ValidatorFactory) bool {
	for _, it := range *arr {
		if !factory.NewValidator(it.Id, it.Id == nil).
			Required(true).
			Valid(factory) {
			return false
		}
		if !factory.NewValidator(it.State, it.State == nil).
			Valid(factory) {
			return false
		}
		if !factory.NewValidator(it.Repository, it.Repository == nil).
			Valid(factory) {
			return false
		}
		if !factory.NewValidator(it.Config, it.Config == nil).
			Required(true).
			Valid(factory) {
			return false
		}
		if !factory.NewValidator(it.StartDate, it.StartDate == nil).
			Valid(factory) {
			return false
		}
		if !factory.NewValidator(it.Environment, it.Environment == nil).
			Valid(factory) {
			return false
		}
	}
	return true
}

func (it *BuildInfoArray) WriteResponse(writer http.ResponseWriter, producer swagger.Producer) {
	writer.WriteHeader(200)
	if err := producer.Produce(writer, it); err != nil {
		panic(err) // let the recovery middleware deal with this
	}
}
