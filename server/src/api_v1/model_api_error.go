package api_v1

// generated by lightweight-swagger-codegen@eaglesakura

import (
	"encoding/json"
	"github.com/eaglesakura/swagger-go-core"
	"net/http"
)

type ApiErrorCodeEnum string
type ApiErrorCodeEnumArray []ApiErrorCodeEnum

const ApiErrorCodeEnum_NotImplements ApiErrorCodeEnum = ApiErrorCodeEnum("NotImplements")
const ApiErrorCodeEnum_AuthFailed ApiErrorCodeEnum = ApiErrorCodeEnum("AuthFailed")
const ApiErrorCodeEnum_DataConflict ApiErrorCodeEnum = ApiErrorCodeEnum("DataConflict")
const ApiErrorCodeEnum_DataModifyFailed ApiErrorCodeEnum = ApiErrorCodeEnum("DataModifyFailed")
const ApiErrorCodeEnum_ParameterError ApiErrorCodeEnum = ApiErrorCodeEnum("ParameterError")
const ApiErrorCodeEnum_Unknown ApiErrorCodeEnum = ApiErrorCodeEnum("Unknown")

var ApiErrorCodeEnumPattern []string = []string{

	"NotImplements",
	"AuthFailed",
	"DataConflict",
	"DataModifyFailed",
	"ParameterError",
	"Unknown",
}

func (it ApiErrorCodeEnum) Ptr() *ApiErrorCodeEnum {
	return &it
}
func (it *ApiErrorCodeEnum) Value() ApiErrorCodeEnum {
	return *it
}
func (it *ApiErrorCodeEnum) Valid(pattern []string) bool {
	if it == nil {
		return false
	}
	value := string(*it)
	for _, v := range pattern {
		if v == value {
			return true
		}
	}
	return false
}

// APIのエラーを定義する。  API実行失敗時、2xx以外のステータスの場合は必ずこのModelを返却する。
type ApiError struct {
	Code *ApiErrorCodeEnum `json:"code"`

	Message *string `json:"message"`
}

// encode to json
func (it ApiError) String() string {
	buf, _ := json.Marshal(it)
	return string(buf)
}

type ApiErrorArray []ApiError

func (it *ApiError) Valid(factory swagger.ValidatorFactory) bool {
	if !factory.NewValidator(it.Code, it.Code == nil).
		Required(true).
		EnumPattern(ApiErrorCodeEnumPattern).
		Valid(factory) {
		return false
	}
	if !factory.NewValidator(it.Message, it.Message == nil).
		Required(true).
		Valid(factory) {
		return false
	}

	return true
}

func (it *ApiError) WriteResponse(writer http.ResponseWriter, producer swagger.Producer) {
	writer.WriteHeader(200)
	if err := producer.Produce(writer, it); err != nil {
		panic(err) // let the recovery middleware deal with this
	}
}

func (arr *ApiErrorArray) Valid(factory swagger.ValidatorFactory) bool {
	for _, it := range *arr {
		if !factory.NewValidator(it.Code, it.Code == nil).
			Required(true).
			EnumPattern(ApiErrorCodeEnumPattern).
			Valid(factory) {
			return false
		}
		if !factory.NewValidator(it.Message, it.Message == nil).
			Required(true).
			Valid(factory) {
			return false
		}
	}
	return true
}

func (it *ApiErrorArray) WriteResponse(writer http.ResponseWriter, producer swagger.Producer) {
	writer.WriteHeader(200)
	if err := producer.Produce(writer, it); err != nil {
		panic(err) // let the recovery middleware deal with this
	}
}
