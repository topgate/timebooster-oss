package api_v1

// generated by lightweight-swagger-codegen@eaglesakura

import (
	"encoding/json"
	"github.com/eaglesakura/swagger-go-core"
	"net/http"
)

// ビルドマシン情報  APIキーごとに1ビルドマシンが割り当てられる。 そのため、API的にはビルドマシンは1つとなる。
type MachineInfo struct {

	// 一意に割り当てられるビルドマシンID
	Id *string `json:"id,omitempty"`

	State *MachineState `json:"state,omitempty"`

	// マシンが配置されているZone Zoneを移行する場合は削除 -> 再生成をメンテナンスする必要がある。
	Zone *string `json:"Zone,omitempty"`
}

// encode to json
func (it MachineInfo) String() string {
	buf, _ := json.Marshal(it)
	return string(buf)
}

type MachineInfoArray []MachineInfo

func (it *MachineInfo) Valid(factory swagger.ValidatorFactory) bool {
	if !factory.NewValidator(it.Id, it.Id == nil).
		Valid(factory) {
		return false
	}
	if !factory.NewValidator(it.State, it.State == nil).
		Valid(factory) {
		return false
	}
	if !factory.NewValidator(it.Zone, it.Zone == nil).
		Valid(factory) {
		return false
	}

	return true
}

func (it *MachineInfo) WriteResponse(writer http.ResponseWriter, producer swagger.Producer) {
	writer.WriteHeader(200)
	if err := producer.Produce(writer, it); err != nil {
		panic(err) // let the recovery middleware deal with this
	}
}

func (arr *MachineInfoArray) Valid(factory swagger.ValidatorFactory) bool {
	for _, it := range *arr {
		if !factory.NewValidator(it.Id, it.Id == nil).
			Valid(factory) {
			return false
		}
		if !factory.NewValidator(it.State, it.State == nil).
			Valid(factory) {
			return false
		}
		if !factory.NewValidator(it.Zone, it.Zone == nil).
			Valid(factory) {
			return false
		}
	}
	return true
}

func (it *MachineInfoArray) WriteResponse(writer http.ResponseWriter, producer swagger.Producer) {
	writer.WriteHeader(200)
	if err := producer.Produce(writer, it); err != nil {
		panic(err) // let the recovery middleware deal with this
	}
}
