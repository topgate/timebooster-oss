package api_v1

// generated by lightweight-swagger-codegen@eaglesakura

import (
	"encoding/json"
	"github.com/eaglesakura/swagger-go-core"
	"net/http"
)

// ビルドのコマンドラインログを示す。 1行ごとに1オブジェクトが生成される。
type BuildLog struct {

	// ログ番号（1ビルドごとに連番で生成される）
	Index *int32 `json:"index"`

	// ログ時刻(Unixミリ秒)
	Date *int64 `json:"date"`

	// 1行ログ
	Text *string `json:"text"`
}

// encode to json
func (it BuildLog) String() string {
	buf, _ := json.Marshal(it)
	return string(buf)
}

type BuildLogArray []BuildLog

func (it *BuildLog) Valid(factory swagger.ValidatorFactory) bool {
	if !factory.NewValidator(it.Index, it.Index == nil).
		Required(true).
		Valid(factory) {
		return false
	}
	if !factory.NewValidator(it.Date, it.Date == nil).
		Required(true).
		Valid(factory) {
		return false
	}
	if !factory.NewValidator(it.Text, it.Text == nil).
		Required(true).
		Valid(factory) {
		return false
	}

	return true
}

func (it *BuildLog) WriteResponse(writer http.ResponseWriter, producer swagger.Producer) {
	writer.WriteHeader(200)
	if err := producer.Produce(writer, it); err != nil {
		panic(err) // let the recovery middleware deal with this
	}
}

func (arr *BuildLogArray) Valid(factory swagger.ValidatorFactory) bool {
	for _, it := range *arr {
		if !factory.NewValidator(it.Index, it.Index == nil).
			Required(true).
			Valid(factory) {
			return false
		}
		if !factory.NewValidator(it.Date, it.Date == nil).
			Required(true).
			Valid(factory) {
			return false
		}
		if !factory.NewValidator(it.Text, it.Text == nil).
			Required(true).
			Valid(factory) {
			return false
		}
	}
	return true
}

func (it *BuildLogArray) WriteResponse(writer http.ResponseWriter, producer swagger.Producer) {
	writer.WriteHeader(200)
	if err := producer.Produce(writer, it); err != nil {
		panic(err) // let the recovery middleware deal with this
	}
}
